package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	graphqlgen "gobase/graphql/generated"
	productdto "gobase/internal/domain/product/dto"
	middlewaregraphql "gobase/internal/pkg/middleware/graphql"
)

// Variants is the resolver for the variants field.
func (r *productResolver) Variants(ctx context.Context, obj *productdto.Product) ([]*productdto.ProductVariant, error) {
	thunk := middlewaregraphql.For(ctx).Product.Variant.Load(ctx, obj.ID)
	dtos, err := thunk()
	if err != nil {
		return nil, err
	}
	return dtos, nil
}

// Attribute is the resolver for the attribute field.
func (r *productAttributeValueResolver) Attribute(ctx context.Context, obj *productdto.ProductAttributeValue) (*productdto.ProductAttribute, error) {
	thunk := middlewaregraphql.For(ctx).Product.Attribute.Load(ctx, obj.AttributeId)
	dtos, err := thunk()
	if err != nil {
		return nil, err
	}
	return dtos[0], nil
}

// Attributes is the resolver for the attributes field.
func (r *productVariantResolver) Attributes(ctx context.Context, obj *productdto.ProductVariant) ([]*productdto.ProductAttributeValue, error) {
	thunk := middlewaregraphql.For(ctx).Product.AttributeValue.Load(ctx, obj.ID)
	dtos, err := thunk()
	if err != nil {
		return nil, err
	}
	return dtos, nil
}

// Product returns graphqlgen.ProductResolver implementation.
func (r *Resolver) Product() graphqlgen.ProductResolver { return &productResolver{r} }

// ProductAttributeValue returns graphqlgen.ProductAttributeValueResolver implementation.
func (r *Resolver) ProductAttributeValue() graphqlgen.ProductAttributeValueResolver {
	return &productAttributeValueResolver{r}
}

// ProductVariant returns graphqlgen.ProductVariantResolver implementation.
func (r *Resolver) ProductVariant() graphqlgen.ProductVariantResolver {
	return &productVariantResolver{r}
}

type productResolver struct{ *Resolver }
type productAttributeValueResolver struct{ *Resolver }
type productVariantResolver struct{ *Resolver }

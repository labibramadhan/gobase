package productresolver

import (
	"context"

	"github.com/google/uuid"

	productdto "gobase/internal/domain/product/dto"
	productusecase "gobase/internal/domain/product/usecase"
)

// Resolver is the interface for the product domain's GraphQL queries and mutations.
// It's automatically generated by gqlgen to match your schema.
type Resolver interface {
	Create(ctx context.Context, input productdto.CreateProductInput) (*productdto.Product, error)
	CreateAttribute(ctx context.Context, input productdto.CreateProductAttributeInput) (*productdto.ProductAttribute, error)
	FindById(ctx context.Context, id uuid.UUID) (*productdto.Product, error)
	FindAll(ctx context.Context, qop *productdto.ProductQop) (*productdto.ProductList, error)
}

// ResolverModule is the implementation of the Resolver interface.
// It embeds the generic BaseResolver to get type-safe access to the use case layer.
type ResolverModule struct {
	productUseCase productusecase.UseCase
}

// ResolverOptions holds the dependencies needed to create a new resolver.
type ResolverOptions struct {
	ProductUseCase productusecase.UseCase
}

// NewResolver creates a new, configured product resolver.
func NewResolver(opts ResolverOptions) Resolver {
	return &ResolverModule{
		productUseCase: opts.ProductUseCase,
	}
}

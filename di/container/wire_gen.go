// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package container

import (
	"gobase/di/provider"
	"gobase/di/registry"
	"gobase/internal/domain/product/dataloader"
	"gobase/internal/domain/product/repository"
	"gobase/internal/domain/product/resolver"
	"gobase/internal/domain/product/usecase"
	"gobase/internal/pkg/middleware/graphql"
	"gobase/transport/graphql"
	"gobase/transport/rest"
)

// Injectors from application.go:

func InitializeApplication(appContext registry.ApplicationContext) (*registry.Application, func(), error) {
	agentListen := appContext.AgentListen
	readConfig := appContext.ReadConfig
	mainConfig := provider.ProvideConfig(appContext, agentListen, readConfig)
	restRouter := &registry.RESTRouter{}
	iApplicationTransportREST, cleanup := transportrest.NewTransport(mainConfig, restRouter)
	db := provider.ProvideInfrastructureBun(mainConfig)
	repositoryOpts := productrepository.RepositoryOpts{
		Bun: db,
	}
	repository := productrepository.NewRepository(repositoryOpts)
	localizer := provider.ProvideInfrastructureLocalizer()
	structProcessorService := provider.ProvideServiceStructProcessorService(localizer)
	useCaseOpts := productusecase.UseCaseOpts{
		Bun:        db,
		Repository: repository,
		SP:         structProcessorService,
	}
	useCase := productusecase.NewUseCase(useCaseOpts)
	resolverOptions := productresolver.ResolverOptions{
		ProductUseCase: useCase,
	}
	resolver := productresolver.NewResolver(resolverOptions)
	graphQLResolver := registry.GraphQLResolver{
		Product: resolver,
	}
	dataloader := productloader.NewDataloader(repository)
	graphQLDataloader := registry.GraphQLDataloader{
		Product: dataloader,
	}
	v := middlewaregraphql.NewDataloader(graphQLDataloader)
	v2 := middlewaregraphql.NewOtel()
	transportOpts := transportgraphql.TransportOpts{
		GraphQLResolver:      graphQLResolver,
		MiddlewareDataloader: v,
		MiddlewareOtel:       v2,
		Config:               mainConfig,
	}
	iApplicationTransportGraphQL, cleanup2 := transportgraphql.NewTransport(transportOpts)
	service, cleanup3 := provider.ProvideServiceOtelService(mainConfig)
	v3 := provider.Initializer(mainConfig, service)
	application := registry.NewApplication(iApplicationTransportREST, iApplicationTransportGraphQL, v3)
	return application, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
